// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: temporal/v1/temporal.proto

package temporalv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActivityOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Timeout from schedule to close - in seconds
	ScheduleToCloseTimeout *int32 `protobuf:"varint,2,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3,oneof" json:"schedule_to_close_timeout,omitempty"`
	// Timeout from start to close - in seconds
	StartToCloseTimeout *int32 `protobuf:"varint,3,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3,oneof" json:"start_to_close_timeout,omitempty"`
	// Timeout from schedule to  - in seconds
	ScheduleToStartTimeout *int32 `protobuf:"varint,4,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3,oneof" json:"schedule_to_start_timeout,omitempty"`
	// Default retry policy
	RetryPolicy *RetryPolicy `protobuf:"bytes,5,opt,name=retry_policy,json=retryPolicy,proto3,oneof" json:"retry_policy,omitempty"`
	// Heartbeat activity timeout
	HearbeatTimeout *int32 `protobuf:"varint,6,opt,name=hearbeat_timeout,json=hearbeatTimeout,proto3,oneof" json:"hearbeat_timeout,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ActivityOptions) Reset() {
	*x = ActivityOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOptions) ProtoMessage() {}

func (x *ActivityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOptions.ProtoReflect.Descriptor instead.
func (*ActivityOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{0}
}

func (x *ActivityOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivityOptions) GetScheduleToCloseTimeout() int32 {
	if x != nil && x.ScheduleToCloseTimeout != nil {
		return *x.ScheduleToCloseTimeout
	}
	return 0
}

func (x *ActivityOptions) GetStartToCloseTimeout() int32 {
	if x != nil && x.StartToCloseTimeout != nil {
		return *x.StartToCloseTimeout
	}
	return 0
}

func (x *ActivityOptions) GetScheduleToStartTimeout() int32 {
	if x != nil && x.ScheduleToStartTimeout != nil {
		return *x.ScheduleToStartTimeout
	}
	return 0
}

func (x *ActivityOptions) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ActivityOptions) GetHearbeatTimeout() int32 {
	if x != nil && x.HearbeatTimeout != nil {
		return *x.HearbeatTimeout
	}
	return 0
}

type WorkflowOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Execution timeout for the workflow - in seconds
	WorkflowExecutionTimeout *int32 `protobuf:"varint,2,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3,oneof" json:"workflow_execution_timeout,omitempty"`
	// The timeout for duration of a single workflow run - in seconds
	WorkflowRunTimeout *int32 `protobuf:"varint,3,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3,oneof" json:"workflow_run_timeout,omitempty"`
	// The timeout for processing workflow task from the time the worker
	// pulled this task
	WorkflowTaskTimeout *int32 `protobuf:"varint,4,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3,oneof" json:"workflow_task_timeout,omitempty"`
	// Default retry policy
	RetryPolicy *RetryPolicy `protobuf:"bytes,5,opt,name=retry_policy,json=retryPolicy,proto3,oneof" json:"retry_policy,omitempty"`
	// Signals is a list of signals that the
	// workflow can accept. They MUST be defined in
	// the same service. The values of the list is
	// simply the name of the corresonding RPC method
	Signals []string `protobuf:"bytes,6,rep,name=signals,proto3" json:"signals,omitempty"`
	// Queries is a list of queries that the
	// workflow can process. They MUST be defined in
	// the same service. The values of the list is
	// simply the name of the corresponding RPC method
	Queries       []string `protobuf:"bytes,7,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowOptions) Reset() {
	*x = WorkflowOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowOptions) ProtoMessage() {}

func (x *WorkflowOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowOptions.ProtoReflect.Descriptor instead.
func (*WorkflowOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{1}
}

func (x *WorkflowOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowOptions) GetWorkflowExecutionTimeout() int32 {
	if x != nil && x.WorkflowExecutionTimeout != nil {
		return *x.WorkflowExecutionTimeout
	}
	return 0
}

func (x *WorkflowOptions) GetWorkflowRunTimeout() int32 {
	if x != nil && x.WorkflowRunTimeout != nil {
		return *x.WorkflowRunTimeout
	}
	return 0
}

func (x *WorkflowOptions) GetWorkflowTaskTimeout() int32 {
	if x != nil && x.WorkflowTaskTimeout != nil {
		return *x.WorkflowTaskTimeout
	}
	return 0
}

func (x *WorkflowOptions) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *WorkflowOptions) GetSignals() []string {
	if x != nil {
		return x.Signals
	}
	return nil
}

func (x *WorkflowOptions) GetQueries() []string {
	if x != nil {
		return x.Queries
	}
	return nil
}

type ServiceOptions struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	TaskQueue string                 `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// These will apply to all workflows unless defined otherwise
	// appart from the `name` one that is ignored here
	DefaultWorkflowOptions *WorkflowOptions `protobuf:"bytes,2,opt,name=default_workflow_options,json=defaultWorkflowOptions,proto3" json:"default_workflow_options,omitempty"`
	// These settings will apply to all activities unless defined otherwise
	// appart from the `name` one that is ignored here
	DefaultActivityOptions *ActivityOptions `protobuf:"bytes,3,opt,name=default_activity_options,json=defaultActivityOptions,proto3" json:"default_activity_options,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ServiceOptions) Reset() {
	*x = ServiceOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceOptions) ProtoMessage() {}

func (x *ServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceOptions.ProtoReflect.Descriptor instead.
func (*ServiceOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceOptions) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *ServiceOptions) GetDefaultWorkflowOptions() *WorkflowOptions {
	if x != nil {
		return x.DefaultWorkflowOptions
	}
	return nil
}

func (x *ServiceOptions) GetDefaultActivityOptions() *ActivityOptions {
	if x != nil {
		return x.DefaultActivityOptions
	}
	return nil
}

type RetryPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Initial interval in seconds for the first retry
	InitialInterval *int32 `protobuf:"varint,1,opt,name=initial_interval,json=initialInterval,proto3,oneof" json:"initial_interval,omitempty"`
	// Backoff coefficient for exponential backoff
	BackoffCoefficient *float32 `protobuf:"fixed32,2,opt,name=backoff_coefficient,json=backoffCoefficient,proto3,oneof" json:"backoff_coefficient,omitempty"`
	// Max inteval between two retries
	MaximumInterval *int32 `protobuf:"varint,3,opt,name=maximum_interval,json=maximumInterval,proto3,oneof" json:"maximum_interval,omitempty"`
	// Maximum of attempts
	MaximumAttempts *int32 `protobuf:"varint,4,opt,name=maximum_attempts,json=maximumAttempts,proto3,oneof" json:"maximum_attempts,omitempty"`
	// Non retryable error types
	NonRetryableErrorTypes []string `protobuf:"bytes,5,rep,name=non_retryable_error_types,json=nonRetryableErrorTypes,proto3" json:"non_retryable_error_types,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{3}
}

func (x *RetryPolicy) GetInitialInterval() int32 {
	if x != nil && x.InitialInterval != nil {
		return *x.InitialInterval
	}
	return 0
}

func (x *RetryPolicy) GetBackoffCoefficient() float32 {
	if x != nil && x.BackoffCoefficient != nil {
		return *x.BackoffCoefficient
	}
	return 0
}

func (x *RetryPolicy) GetMaximumInterval() int32 {
	if x != nil && x.MaximumInterval != nil {
		return *x.MaximumInterval
	}
	return 0
}

func (x *RetryPolicy) GetMaximumAttempts() int32 {
	if x != nil && x.MaximumAttempts != nil {
		return *x.MaximumAttempts
	}
	return 0
}

func (x *RetryPolicy) GetNonRetryableErrorTypes() []string {
	if x != nil {
		return x.NonRetryableErrorTypes
	}
	return nil
}

type SignalOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the signal, better left auto generated
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalOptions) Reset() {
	*x = SignalOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOptions) ProtoMessage() {}

func (x *SignalOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOptions.ProtoReflect.Descriptor instead.
func (*SignalOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{4}
}

func (x *SignalOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QueryOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the query, better left auto generated
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryOptions) Reset() {
	*x = QueryOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOptions) ProtoMessage() {}

func (x *QueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOptions.ProtoReflect.Descriptor instead.
func (*QueryOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{5}
}

func (x *QueryOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var file_temporal_v1_temporal_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*ActivityOptions)(nil),
		Field:         50000,
		Name:          "temporal.v1.activity",
		Tag:           "bytes,50000,opt,name=activity",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*WorkflowOptions)(nil),
		Field:         50001,
		Name:          "temporal.v1.workflow",
		Tag:           "bytes,50001,opt,name=workflow",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*SignalOptions)(nil),
		Field:         50002,
		Name:          "temporal.v1.signal",
		Tag:           "bytes,50002,opt,name=signal",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*QueryOptions)(nil),
		Field:         50003,
		Name:          "temporal.v1.query",
		Tag:           "bytes,50003,opt,name=query",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*ServiceOptions)(nil),
		Field:         50002,
		Name:          "temporal.v1.service",
		Tag:           "bytes,50002,opt,name=service",
		Filename:      "temporal/v1/temporal.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional temporal.v1.ActivityOptions activity = 50000;
	E_Activity = &file_temporal_v1_temporal_proto_extTypes[0]
	// optional temporal.v1.WorkflowOptions workflow = 50001;
	E_Workflow = &file_temporal_v1_temporal_proto_extTypes[1]
	// optional temporal.v1.SignalOptions signal = 50002;
	E_Signal = &file_temporal_v1_temporal_proto_extTypes[2]
	// optional temporal.v1.QueryOptions query = 50003;
	E_Query = &file_temporal_v1_temporal_proto_extTypes[3]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional temporal.v1.ServiceOptions service = 50002;
	E_Service = &file_temporal_v1_temporal_proto_extTypes[4]
)

var File_temporal_v1_temporal_proto protoreflect.FileDescriptor

const file_temporal_v1_temporal_proto_rawDesc = "" +
	"\n" +
	"\x1atemporal/v1/temporal.proto\x12\vtemporal.v1\x1a google/protobuf/descriptor.proto\"\xce\x03\n" +
	"\x0fActivityOptions\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12>\n" +
	"\x19schedule_to_close_timeout\x18\x02 \x01(\x05H\x00R\x16scheduleToCloseTimeout\x88\x01\x01\x128\n" +
	"\x16start_to_close_timeout\x18\x03 \x01(\x05H\x01R\x13startToCloseTimeout\x88\x01\x01\x12>\n" +
	"\x19schedule_to_start_timeout\x18\x04 \x01(\x05H\x02R\x16scheduleToStartTimeout\x88\x01\x01\x12@\n" +
	"\fretry_policy\x18\x05 \x01(\v2\x18.temporal.v1.RetryPolicyH\x03R\vretryPolicy\x88\x01\x01\x12.\n" +
	"\x10hearbeat_timeout\x18\x06 \x01(\x05H\x04R\x0fhearbeatTimeout\x88\x01\x01B\x1c\n" +
	"\x1a_schedule_to_close_timeoutB\x19\n" +
	"\x17_start_to_close_timeoutB\x1c\n" +
	"\x1a_schedule_to_start_timeoutB\x0f\n" +
	"\r_retry_policyB\x13\n" +
	"\x11_hearbeat_timeout\"\xb1\x03\n" +
	"\x0fWorkflowOptions\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12A\n" +
	"\x1aworkflow_execution_timeout\x18\x02 \x01(\x05H\x00R\x18workflowExecutionTimeout\x88\x01\x01\x125\n" +
	"\x14workflow_run_timeout\x18\x03 \x01(\x05H\x01R\x12workflowRunTimeout\x88\x01\x01\x127\n" +
	"\x15workflow_task_timeout\x18\x04 \x01(\x05H\x02R\x13workflowTaskTimeout\x88\x01\x01\x12@\n" +
	"\fretry_policy\x18\x05 \x01(\v2\x18.temporal.v1.RetryPolicyH\x03R\vretryPolicy\x88\x01\x01\x12\x18\n" +
	"\asignals\x18\x06 \x03(\tR\asignals\x12\x18\n" +
	"\aqueries\x18\a \x03(\tR\aqueriesB\x1d\n" +
	"\x1b_workflow_execution_timeoutB\x17\n" +
	"\x15_workflow_run_timeoutB\x18\n" +
	"\x16_workflow_task_timeoutB\x0f\n" +
	"\r_retry_policy\"\xdf\x01\n" +
	"\x0eServiceOptions\x12\x1d\n" +
	"\n" +
	"task_queue\x18\x01 \x01(\tR\ttaskQueue\x12V\n" +
	"\x18default_workflow_options\x18\x02 \x01(\v2\x1c.temporal.v1.WorkflowOptionsR\x16defaultWorkflowOptions\x12V\n" +
	"\x18default_activity_options\x18\x03 \x01(\v2\x1c.temporal.v1.ActivityOptionsR\x16defaultActivityOptions\"\xe5\x02\n" +
	"\vRetryPolicy\x12.\n" +
	"\x10initial_interval\x18\x01 \x01(\x05H\x00R\x0finitialInterval\x88\x01\x01\x124\n" +
	"\x13backoff_coefficient\x18\x02 \x01(\x02H\x01R\x12backoffCoefficient\x88\x01\x01\x12.\n" +
	"\x10maximum_interval\x18\x03 \x01(\x05H\x02R\x0fmaximumInterval\x88\x01\x01\x12.\n" +
	"\x10maximum_attempts\x18\x04 \x01(\x05H\x03R\x0fmaximumAttempts\x88\x01\x01\x129\n" +
	"\x19non_retryable_error_types\x18\x05 \x03(\tR\x16nonRetryableErrorTypesB\x13\n" +
	"\x11_initial_intervalB\x16\n" +
	"\x14_backoff_coefficientB\x13\n" +
	"\x11_maximum_intervalB\x13\n" +
	"\x11_maximum_attempts\"#\n" +
	"\rSignalOptions\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\"\n" +
	"\fQueryOptions\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name:]\n" +
	"\bactivity\x12\x1e.google.protobuf.MethodOptions\x18І\x03 \x01(\v2\x1c.temporal.v1.ActivityOptionsR\bactivity\x88\x01\x01:]\n" +
	"\bworkflow\x12\x1e.google.protobuf.MethodOptions\x18ц\x03 \x01(\v2\x1c.temporal.v1.WorkflowOptionsR\bworkflow\x88\x01\x01:W\n" +
	"\x06signal\x12\x1e.google.protobuf.MethodOptions\x18҆\x03 \x01(\v2\x1a.temporal.v1.SignalOptionsR\x06signal\x88\x01\x01:T\n" +
	"\x05query\x12\x1e.google.protobuf.MethodOptions\x18ӆ\x03 \x01(\v2\x19.temporal.v1.QueryOptionsR\x05query\x88\x01\x01:[\n" +
	"\aservice\x12\x1f.google.protobuf.ServiceOptions\x18҆\x03 \x01(\v2\x1b.temporal.v1.ServiceOptionsR\aservice\x88\x01\x01B\xb7\x01\n" +
	"\x0fcom.temporal.v1B\rTemporalProtoP\x01ZHgithub.com/thomas-maurice/protoc-gen-go-tmprl/gen/temporal/v1;temporalv1\xa2\x02\x03TXX\xaa\x02\vTemporal.V1\xca\x02\vTemporal\\V1\xe2\x02\x17Temporal\\V1\\GPBMetadata\xea\x02\fTemporal::V1b\x06proto3"

var (
	file_temporal_v1_temporal_proto_rawDescOnce sync.Once
	file_temporal_v1_temporal_proto_rawDescData []byte
)

func file_temporal_v1_temporal_proto_rawDescGZIP() []byte {
	file_temporal_v1_temporal_proto_rawDescOnce.Do(func() {
		file_temporal_v1_temporal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_v1_temporal_proto_rawDesc), len(file_temporal_v1_temporal_proto_rawDesc)))
	})
	return file_temporal_v1_temporal_proto_rawDescData
}

var file_temporal_v1_temporal_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_temporal_v1_temporal_proto_goTypes = []any{
	(*ActivityOptions)(nil),             // 0: temporal.v1.ActivityOptions
	(*WorkflowOptions)(nil),             // 1: temporal.v1.WorkflowOptions
	(*ServiceOptions)(nil),              // 2: temporal.v1.ServiceOptions
	(*RetryPolicy)(nil),                 // 3: temporal.v1.RetryPolicy
	(*SignalOptions)(nil),               // 4: temporal.v1.SignalOptions
	(*QueryOptions)(nil),                // 5: temporal.v1.QueryOptions
	(*descriptorpb.MethodOptions)(nil),  // 6: google.protobuf.MethodOptions
	(*descriptorpb.ServiceOptions)(nil), // 7: google.protobuf.ServiceOptions
}
var file_temporal_v1_temporal_proto_depIdxs = []int32{
	3,  // 0: temporal.v1.ActivityOptions.retry_policy:type_name -> temporal.v1.RetryPolicy
	3,  // 1: temporal.v1.WorkflowOptions.retry_policy:type_name -> temporal.v1.RetryPolicy
	1,  // 2: temporal.v1.ServiceOptions.default_workflow_options:type_name -> temporal.v1.WorkflowOptions
	0,  // 3: temporal.v1.ServiceOptions.default_activity_options:type_name -> temporal.v1.ActivityOptions
	6,  // 4: temporal.v1.activity:extendee -> google.protobuf.MethodOptions
	6,  // 5: temporal.v1.workflow:extendee -> google.protobuf.MethodOptions
	6,  // 6: temporal.v1.signal:extendee -> google.protobuf.MethodOptions
	6,  // 7: temporal.v1.query:extendee -> google.protobuf.MethodOptions
	7,  // 8: temporal.v1.service:extendee -> google.protobuf.ServiceOptions
	0,  // 9: temporal.v1.activity:type_name -> temporal.v1.ActivityOptions
	1,  // 10: temporal.v1.workflow:type_name -> temporal.v1.WorkflowOptions
	4,  // 11: temporal.v1.signal:type_name -> temporal.v1.SignalOptions
	5,  // 12: temporal.v1.query:type_name -> temporal.v1.QueryOptions
	2,  // 13: temporal.v1.service:type_name -> temporal.v1.ServiceOptions
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	9,  // [9:14] is the sub-list for extension type_name
	4,  // [4:9] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_temporal_v1_temporal_proto_init() }
func file_temporal_v1_temporal_proto_init() {
	if File_temporal_v1_temporal_proto != nil {
		return
	}
	file_temporal_v1_temporal_proto_msgTypes[0].OneofWrappers = []any{}
	file_temporal_v1_temporal_proto_msgTypes[1].OneofWrappers = []any{}
	file_temporal_v1_temporal_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_v1_temporal_proto_rawDesc), len(file_temporal_v1_temporal_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 5,
			NumServices:   0,
		},
		GoTypes:           file_temporal_v1_temporal_proto_goTypes,
		DependencyIndexes: file_temporal_v1_temporal_proto_depIdxs,
		MessageInfos:      file_temporal_v1_temporal_proto_msgTypes,
		ExtensionInfos:    file_temporal_v1_temporal_proto_extTypes,
	}.Build()
	File_temporal_v1_temporal_proto = out.File
	file_temporal_v1_temporal_proto_goTypes = nil
	file_temporal_v1_temporal_proto_depIdxs = nil
}
